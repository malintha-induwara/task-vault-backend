// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String? // Optional field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todos  Todo[] // Relation to Todo model (one-to-many)
  tokens Token[] // Relation to Token model (one-to-many)

  @@map("users") // Optional: map to collection name "users"
}

model Todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  task      String   
  completed Boolean  @default(false)
  dueDate   DateTime? // Added due date field (optional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId // Foreign key referencing User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation field

  @@index([userId]) // Index on userId for faster lookups
  @@map("todos")
}

// To store refresh tokens and password reset tokens
model Token {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  token  String   @unique // Store the HASHED token
  type   TokenType // Enum defined below
  expires DateTime
  createdAt DateTime @default(now())

  userId String @db.ObjectId // Foreign key referencing User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation field

  @@index([userId, type]) // Index for faster lookups by user and type
  @@map("tokens")
}

enum TokenType {
  REFRESH
  RESET
}